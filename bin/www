#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('moringa-connect-backend:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var secPort = normalizePort(process.env.SEC_PORT || '3443'); // Added HTTPS port
app.set('port', port);
app.set('secPort', secPort);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create HTTPS server.
 */

const httpsOptions = {
  key: fs.readFileSync(__dirname + '/server.key'),
  cert: fs.readFileSync(__dirname + '/server.cert'),
};

var secureServer = https.createServer(httpsOptions, app);

/**
 * Listen on provided ports, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`HTTP Server listening on port ${port}`);
});
server.on('error', (error) => onError(error, port));

secureServer.listen(secPort, () => {
  console.log(`HTTPS Server listening on port ${secPort}`);
});
secureServer.on('error', (error) => onError(error, secPort));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(val)) {
    return val; // named pipe
  }
  if (port >= 0) {
    return port; // port number
  }
  return false;
}

/**
 * Event listener for server "error" events.
 */

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
